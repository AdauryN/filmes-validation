ContextMap {
    type SYSTEM_LANDSCAPE
    state AS_IS

    contains UserManagement
    contains ContentManagement
    contains SocialFeatures

    UserManagement Supplier-Customer SocialFeatures
    ContentManagement [P] <-> [P] SocialFeatures
    UserManagement [P] <-> [P] ContentManagement
}

' User Management Bounded Context
BOUNDED_CONTEXT(UserManagement) {
    AGGREGATE(UserAggregate) {
        ENTITY(User) {
            + id : BIGINT
            + username : VARCHAR(255)
            + email : VARCHAR(255)
            + password : VARCHAR(255)
        }
    }

    AGGREGATE(FavoritePersonAggregate) {
        ENTITY(FavoritePerson) {
            + userId : BIGINT
            + personId : BIGINT
        }
    }

    SERVICE(UserService) {
        + registerUser(username, email, password)
        + authenticateUser(username, password)
        + getUserProfile(userId)
    }

    SERVICE(FavoriteService) {
        + addFavoritePerson(userId, personId)
        + removeFavoritePerson(userId, personId)
        + getFavoritePersons(userId)
    }
}

' Content Management Bounded Context
BOUNDED_CONTEXT(ContentManagement) {
    AGGREGATE(MovieAggregate) {
        ENTITY(Movie) {
            + id : BIGINT
            + title : VARCHAR(255)
        }
    }

    AGGREGATE(MovieListAggregate) {
        ENTITY(MovieList) {
            + id : BIGINT
            + name : VARCHAR(255)
            + privacySetting : VARCHAR(255)
            + userId : BIGINT
        }
    }

    AGGREGATE(ReviewAggregate) {
        ENTITY(Review) {
            + id : BIGINT
            + content : VARCHAR(255)
            + rating : INTEGER
            + movieId : BIGINT
            + userId : BIGINT
        }
    }

    SERVICE(MovieService) {
        + createMovie(title)
        + getMovies()
    }

    SERVICE(MovieListService) {
        + createList(name, privacySetting, userId)
        + addMovieToList(listId, movieId)
        + getUserMovieLists(userId)
    }

    SERVICE(ReviewService) {
        + createReview(content, rating, movieId, userId)
        + getMovieReviews(movieId)
    }
}

' Social Features Bounded Context
BOUNDED_CONTEXT(SocialFeatures) {
    AGGREGATE(WatchPartyAggregate) {
        ENTITY(WatchParty) {
            + id : BIGINT
            + movieTitle : VARCHAR(255)
            + scheduledTime : TIMESTAMP
            + hostId : BIGINT
            + movieId : BIGINT
        }
    }

    AGGREGATE(WatchPartyParticipantAggregate) {
        ENTITY(WatchPartyParticipant) {
            + watchPartyId : BIGINT
            + userId : BIGINT
        }
    }

    AGGREGATE(PersonAggregate) {
        ENTITY(Person) {
            + id : BIGINT
            + name : VARCHAR(255)
            + role : VARCHAR(255)
        }
    }

    SERVICE(WatchPartyService) {
        + createWatchParty(name, movieId, scheduledTime, hostId)
        + getUserWatchParties(userId)
        + addParticipant(watchPartyId, userId)
        + removeParticipant(watchPartyId, userId)
    }

    SERVICE(PersonService) {
        + createPerson(name, role)
        + getPersons()
    }
}

' Define Relationships Between Bounded Contexts
UserManagement -[hidden]-> ContentManagement
UserManagement -[hidden]-> SocialFeatures
ContentManagement -[hidden]-> SocialFeatures
